package bor.tools.simplellm.chat;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import bor.tools.simplellm.websearch.SearchResponse;
import lombok.Data;

/**
 * Metadata about web search results associated with a chat message.
 * <p>
 * This class encapsulates search-specific information that can be attached to
 * assistant messages generated by web search-enabled models (e.g., Perplexity AI).
 * It provides a lightweight way to store citations, search results, and related
 * questions without including the full response object.
 * </p>
 * <p>
 * <b>Usage Example:</b>
 * </p>
 * <pre>{@code
 * Message assistantMsg = chat.getLastMessage();
 * if (assistantMsg.hasSearchMetadata()) {
 *     SearchMetadata metadata = assistantMsg.getSearchMetadata();
 *     System.out.println("Citations: " + metadata.getCitations());
 *     System.out.println("Related: " + metadata.getRelatedQuestions());
 * }
 * }</pre>
 *
 * @author AlessandroBorges
 * @since 1.1
 *
 * @see Message
 * @see SearchResponse
 */
@Data
@JsonPropertyOrder({
    "citations", "searchResults", "relatedQuestions", "images", "searchQueriesCount"
})
public class SearchMetadata {

    /**
     * List of URLs cited in the response.
     * <p>
     * These citations provide sources for the information in the message,
     * allowing users to verify facts and explore topics further.
     * </p>
     */
    private List<String> citations;

    /**
     * Metadata about search results used to generate the response.
     * <p>
     * Each entry contains information about a source document including
     * title, URL, publication date, and a snippet of relevant content.
     * </p>
     */
    private List<SearchResultMetadata> searchResults;

    /**
     * Related questions suggested by the model.
     * <p>
     * These questions help users explore related topics or dig deeper
     * into specific aspects of their original query.
     * </p>
     */
    private List<String> relatedQuestions;

    /**
     * Images related to the search query (if requested).
     * <p>
     * This field is populated when the search was configured to return images.
     * </p>
     */
    private List<ImageResult> images;

    /**
     * Number of search queries performed by the model.
     * <p>
     * Some models (e.g., deep research) may perform multiple searches
     * to gather comprehensive information.
     * </p>
     */
    private Integer searchQueriesCount;

    /**
     * Default constructor.
     * Initializes empty lists to avoid null pointer exceptions.
     */
    public SearchMetadata() {
        this.citations = new ArrayList<>();
        this.searchResults = new ArrayList<>();
        this.relatedQuestions = new ArrayList<>();
        this.images = new ArrayList<>();
    }

    /**
     * Creates SearchMetadata from a SearchResponse.
     * <p>
     * This is a convenience constructor to extract search metadata from
     * a complete SearchResponse object.
     * </p>
     *
     * @param searchResponse the SearchResponse to extract metadata from
     */
    public SearchMetadata(SearchResponse searchResponse) {
        this();
        if (searchResponse != null) {
            if (searchResponse.getCitations() != null) {
                this.citations = new ArrayList<>(searchResponse.getCitations());
            }
            if (searchResponse.getSearchResults() != null) {
                this.searchResults = new ArrayList<>();
                for (bor.tools.simplellm.websearch.SearchResponse.SearchResultMetadata result : searchResponse.getSearchResults()) {
                    this.searchResults.add(new SearchResultMetadata(result));
                }
            }
            if (searchResponse.getRelatedQuestions() != null) {
                this.relatedQuestions = new ArrayList<>(searchResponse.getRelatedQuestions());
            }
            if (searchResponse.getImages() != null) {
                this.images = new ArrayList<>();
                for (bor.tools.simplellm.websearch.SearchResponse.ImageResult image : searchResponse.getImages()) {
                    this.images.add(new ImageResult(image));
                }
            }
            this.searchQueriesCount = searchResponse.getSearchQueriesCount();
        }
    }

    /**
     * Checks if this metadata contains any citations.
     *
     * @return true if citations are present, false otherwise
     */
    public boolean hasCitations() {
        return citations != null && !citations.isEmpty();
    }

    /**
     * Checks if this metadata contains any search results.
     *
     * @return true if search results are present, false otherwise
     */
    public boolean hasSearchResults() {
        return searchResults != null && !searchResults.isEmpty();
    }

    /**
     * Checks if this metadata contains any related questions.
     *
     * @return true if related questions are present, false otherwise
     */
    public boolean hasRelatedQuestions() {
        return relatedQuestions != null && !relatedQuestions.isEmpty();
    }

    /**
     * Checks if this metadata contains any images.
     *
     * @return true if images are present, false otherwise
     */
    public boolean hasImages() {
        return images != null && !images.isEmpty();
    }

    /**
     * Adds a citation URL to the citations list.
     *
     * @param citation the citation URL to add
     * @return this SearchMetadata for method chaining
     */
    public SearchMetadata addCitation(String citation) {
        if (this.citations == null) {
            this.citations = new ArrayList<>();
        }
        this.citations.add(citation);
        return this;
    }

    /**
     * Adds a related question to the list.
     *
     * @param question the related question to add
     * @return this SearchMetadata for method chaining
     */
    public SearchMetadata addRelatedQuestion(String question) {
        if (this.relatedQuestions == null) {
            this.relatedQuestions = new ArrayList<>();
        }
        this.relatedQuestions.add(question);
        return this;
    }

    /**
     * Adds a search result metadata entry.
     *
     * @param result the search result metadata to add
     * @return this SearchMetadata for method chaining
     */
    public SearchMetadata addSearchResult(SearchResultMetadata result) {
        if (this.searchResults == null) {
            this.searchResults = new ArrayList<>();
        }
        this.searchResults.add(result);
        return this;
    }

    /**
     * Adds an image result.
     *
     * @param image the image result to add
     * @return this SearchMetadata for method chaining
     */
    public SearchMetadata addImage(ImageResult image) {
        if (this.images == null) {
            this.images = new ArrayList<>();
        }
        this.images.add(image);
        return this;
    }

    /**
     * Metadata about a single search result.
     */
    @Data
    public static class SearchResultMetadata {
        private String title;
        private String url;
        private String date;
        private String snippet;

        public SearchResultMetadata() {
        }

        public SearchResultMetadata(String title, String url, String date, String snippet) {
            this.title = title;
            this.url = url;
            this.date = date;
            this.snippet = snippet;
        }

        /**
         * Creates SearchResultMetadata from SearchResponse.SearchResultMetadata.
         */
        public SearchResultMetadata(SearchResponse.SearchResultMetadata other) {
            if (other != null) {
                this.title = other.getTitle();
                this.url = other.getUrl();
                this.date = other.getDate();
                this.snippet = other.getSnippet();
            }
        }
    }

    /**
     * Metadata about an image result.
     */
    @Data
    public static class ImageResult {
        private String url;
        private String title;
        private String alt;

        public ImageResult() {
        }

        public ImageResult(String url, String title, String alt) {
            this.url = url;
            this.title = title;
            this.alt = alt;
        }

        /**
         * Creates ImageResult from SearchResponse.ImageResult.
         */
        public ImageResult(SearchResponse.ImageResult other) {
            if (other != null) {
                this.url = other.getUrl();
                this.title = other.getTitle();
                this.alt = other.getAlt();
            }
        }
    }

    /**
     * Returns a summary string of the metadata.
     *
     * @return summary string
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SearchMetadata{");
        sb.append("citations=").append(citations != null ? citations.size() : 0);
        sb.append(", searchResults=").append(searchResults != null ? searchResults.size() : 0);
        sb.append(", relatedQuestions=").append(relatedQuestions != null ? relatedQuestions.size() : 0);
        sb.append(", images=").append(images != null ? images.size() : 0);
        if (searchQueriesCount != null) {
            sb.append(", searchQueriesCount=").append(searchQueriesCount);
        }
        sb.append('}');
        return sb.toString();
    }
}
